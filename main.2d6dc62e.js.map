{"version":3,"sources":["scripts/main.js"],"names":["board","messageStart","document","querySelector","messageLose","messageWin","score","button","rows","columns","scoreCount","won","setGame","setTile","hasEmptyTile","r","c","loseGame","i","j","clearBoard","forEach","row","cell","tile","getElementById","toString","innerText","classList","value","add","found","numb","Math","random","floor","remove","addEventListener","updateTile","num","filterZero","filter","slide","newRow","length","push","slideLeft","initialBoard","map","hasChanges","slideRight","reverse","slideUp","slideDown","arrayA","arrayB","e","replace","preventDefault","key"],"mappings":"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","file":"main.2d6dc62e.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\n\nconst rows = 4;\nconst columns = 4;\nlet board;\nlet scoreCount = 0;\nlet won = false;\n\nbutton.addEventListener('click', (e) => {\n  messageStart.classList.add('hidden');\n  button.innerText = 'Restart';\n  button.classList.replace('start', 'restart');\n\n  setGame();\n});\n\nbutton.addEventListener('click', (e) => {\n  messageWin.classList.add('hidden');\n  won = false;\n\n  clearBoard();\n  setGame();\n});\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  setTile();\n  setTile();\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction loseGame() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < rows; j++) {\n      if (board[i][j] === board[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < rows - 1; i++) {\n    for (let j = 0; j < rows; j++) {\n      if (board[i][j] === board[i + 1][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction clearBoard() {\n  board.forEach((row, r) => {\n    row.forEach((cell, c) => {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = '';\n      tile.classList.value = '';\n      tile.classList.add('field-cell');\n      score.innerText = 0;\n      scoreCount = 0;\n    });\n  });\n}\n\nfunction setTile() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n  const numb = Math.random() < 0.9 ? 2 : 4;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = numb;\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = `${numb}`;\n      tile.classList.add('field-cell--' + numb.toString());\n      found = true;\n    }\n  }\n\n  if (loseGame()) {\n    messageLose.classList.remove('hidden');\n\n    button.addEventListener('click', () => {\n      messageLose.classList.add('hidden');\n\n      clearBoard();\n      setGame();\n    });\n  }\n}\n\nfunction updateTile(r, c) {\n  const tile = document.getElementById(r.toString() + '-' + c.toString());\n  const num = board[r][c];\n\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num.toString();\n    tile.classList.add('field-cell' + '--' + num.toString());\n  }\n\n  if (num === 2048) {\n    messageWin.classList.remove('hidden');\n    won = true;\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  if (won) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n});\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(newRow) {\n  let row = newRow;\n\n  row = filterZero(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      scoreCount += row[i];\n      score.innerText = scoreCount;\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columns) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  const initialBoard = board.map(row => [...row]);\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      updateTile(r, c);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setTile();\n  }\n}\n\nfunction slideRight() {\n  const initialBoard = board.map(row => [...row]);\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n    board[r] = row.reverse();\n\n    for (let c = 0; c < columns; c++) {\n      updateTile(r, c);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setTile();\n  }\n}\n\nfunction slideUp() {\n  const initialBoard = board.map(row => [...row]);\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      updateTile(r, c);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setTile();\n  }\n}\n\nfunction slideDown() {\n  const initialBoard = board.map(row => [...row]);\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      updateTile(r, c);\n    }\n  }\n\n  if (hasChanges(initialBoard, board)) {\n    setTile();\n  }\n}\n\nfunction hasChanges(arrayA, arrayB) {\n  for (let i = 0; i < arrayA.length; i++) {\n    for (let j = 0; j < arrayA[i].length; j++) {\n      if (arrayA[i][j] !== arrayB[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}